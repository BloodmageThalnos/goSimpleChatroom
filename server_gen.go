package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Msg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "typ":
			z.Type, err = dc.ReadInt8()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "msg":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "usr":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "User")
				return
			}
			if z.User == nil {
				z.User = make(map[string]string, zb0002)
			} else if len(z.User) > 0 {
				for key := range z.User {
					delete(z.User, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "User")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "User", za0001)
					return
				}
				z.User[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Msg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "typ"
	err = en.Append(0x83, 0xa3, 0x74, 0x79, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt8(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "msg"
	err = en.Append(0xa3, 0x6d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "usr"
	err = en.Append(0xa3, 0x75, 0x73, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.User)))
	if err != nil {
		err = msgp.WrapError(err, "User")
		return
	}
	for za0001, za0002 := range z.User {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "User")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "User", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Msg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "typ"
	o = append(o, 0x83, 0xa3, 0x74, 0x79, 0x70)
	o = msgp.AppendInt8(o, z.Type)
	// string "msg"
	o = append(o, 0xa3, 0x6d, 0x73, 0x67)
	o = msgp.AppendString(o, z.Content)
	// string "usr"
	o = append(o, 0xa3, 0x75, 0x73, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.User)))
	for za0001, za0002 := range z.User {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Msg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "typ":
			z.Type, bts, err = msgp.ReadInt8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "msg":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "usr":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "User")
				return
			}
			if z.User == nil {
				z.User = make(map[string]string, zb0002)
			} else if len(z.User) > 0 {
				for key := range z.User {
					delete(z.User, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "User")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "User", za0001)
					return
				}
				z.User[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Msg) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int8Size + 4 + msgp.StringPrefixSize + len(z.Content) + 4 + msgp.MapHeaderSize
	if z.User != nil {
		for za0001, za0002 := range z.User {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	return
}
